=pod

=head1 NAME

 CMP_CTX_create,
 CMP_CTX_init,
 CMP_CTX_delete,
 CMP_CTX_set1_referenceValue,
 CMP_CTX_set1_secretValue,
 CMP_CTX_set1_caCert,
 CMP_CTX_set1_clCert,
 CMP_CTX_set1_subjectName,
 CMP_CTX_set1_newClCert,
 CMP_CTX_set0_pkey,
 CMP_CTX_set0_newPkey,
 CMP_CTX_set1_pkey,
 CMP_CTX_set1_newPkey,
 CMP_CTX_set1_transactionID,
 CMP_CTX_set1_recipNonce,
 CMP_CTX_set1_protectionAlgor,
 CMP_CTX_set_protectionAlgor,
 CMP_CTX_set_compatibility,
 CMP_CTX_set1_serverName,
 CMP_CTX_set_option,
 CMP_CTX_caPubs_pop,
 CMP_CTX_caPubs_num,
 CMP_CTX_set1_caPubs,
 CMP_CTX_set1_extraCertsOut,
 CMP_CTX_extraCertsOut_push1, 
 CMP_CTX_extraCertsOut_num,
 CMP_CTX_set1_extraCertsIn,
 CMP_CTX_extraCertsIn_pop,
 CMP_CTX_extraCertsIn_num,
 CMP_CTX_set0_trustedStore,
 CMP_CTX_set0_untrustedStore,
 CMP_CTX_set_error_callback,
 CMP_CTX_set_debug_callback

 CMP_CTX_failInfoCode_get
 CMP_CTX_sender_get
 CMP_CTX_set1_popoMethod
 CMP_CTX_set1_proxyName
 CMP_CTX_set1_proxyPort
 CMP_CTX_set1_recipient
 CMP_CTX_set1_sender
 CMP_CTX_set1_serverPath
 CMP_CTX_set1_serverPort
 CMP_CTX_set1_timeOut
 CMP_CTX_set_certConf_callback
 CMP_CTX_subjectAltName_push1

=head1 SYNOPSIS

 #include <openssl/cmp.h>

 CMP_CTX *CMP_CTX_create();
 int CMP_CTX_init( CMP_CTX *ctx);
 void CMP_CTX_delete(CMP_CTX *ctx);

 int CMP_CTX_set1_referenceValue( CMP_CTX *ctx, const unsigned char *ref, size_t len);
 int CMP_CTX_set1_secretValue( CMP_CTX *ctx, const unsigned char *sec, const size_t len);
 int CMP_CTX_set1_caCert( CMP_CTX *ctx, const X509 *cert);
 int CMP_CTX_set1_clCert( CMP_CTX *ctx, const X509 *cert);
 int CMP_CTX_set1_subjectName( CMP_CTX *ctx, const X509_NAME *name);
 int CMP_CTX_set1_newClCert( CMP_CTX *ctx, const X509 *cert);
 int CMP_CTX_set0_pkey( CMP_CTX *ctx, const EVP_PKEY *pkey);
 int CMP_CTX_set0_newPkey( CMP_CTX *ctx, const EVP_PKEY *pkey);
 int CMP_CTX_set1_pkey( CMP_CTX *ctx, const EVP_PKEY *pkey);
 int CMP_CTX_set1_newPkey( CMP_CTX *ctx, const EVP_PKEY *pkey);
 int CMP_CTX_set1_transactionID( CMP_CTX *ctx, const ASN1_OCTET_STRING *id);
 int CMP_CTX_set1_recipNonce( CMP_CTX *ctx, const ASN1_OCTET_STRING *nonce);
 int CMP_CTX_set1_protectionAlgor( CMP_CTX *ctx, const X509_ALGOR *algor);
 int CMP_CTX_set1_serverName( CMP_CTX *ctx, const char *name);
 int CMP_CTX_set1_serverPort( CMP_CTX *ctx, int port);
 X509 *CMP_CTX_caPubs_pop( CMP_CTX *ctx);
 int CMP_CTX_caPubs_num( CMP_CTX *ctx);
 int CMP_CTX_set1_caPubs( CMP_CTX *ctx, const STACK_OF(X509) *caPubs);

 int CMP_CTX_set1_extraCertsOut( CMP_CTX *ctx, const STACK_OF(X509) *extraCertsOut);
 int CMP_CTX_extraCertsOut_push1( CMP_CTX *ctx, const X509 *val);
 int CMP_CTX_extraCertsOut_num( CMP_CTX *ctx);
 int CMP_CTX_set1_extraCertsIn( CMP_CTX *ctx, const STACK_OF(X509) *extraCertsIn);
 X509 *CMP_CTX_extraCertsIn_pop( CMP_CTX *ctx);
 int CMP_CTX_extraCertsIn_num( CMP_CTX *ctx);

 int CMP_CTX_set0_trustedStore( CMP_CTX *ctx, X509_STORE *store);
 int CMP_CTX_set0_untrustedStore( CMP_CTX *ctx, X509_STORE *store);

 int CMP_CTX_set_error_callback( CMP_CTX *ctx, cmp_logfn_t cb)
 int CMP_CTX_set_debug_callback( CMP_CTX *ctx, cmp_logfn_t cb)

 #define CMP_ALG_PBMAC 1
 #define CMP_ALG_SIG   2
 int CMP_CTX_set_protectionAlgor( CMP_CTX *ctx, const int algId);

 #define CMP_COMPAT_RFC		1
 #define CMP_COMPAT_CRYPTLIB	2
 #define CMP_COMPAT_INSTA	3 - only supported when built with -DSUPPORT_OLD_INSTA
 #define CMP_COMPAT_INSTA_3_3	4
 int CMP_CTX_set_compatibility( CMP_CTX *ctx, const int mode);

 #define CMP_CTX_OPT_UNSET           0
 #define CMP_CTX_OPT_SET             1
 #define CMP_CTX_OPT_IMPLICITCONFIRM 1
 int CMP_CTX_set_option( CMP_CTX *ctx, const int opt, const int val);

 unsigned long CMP_CTX_failInfoCode_get(CMP_CTX *ctx);
 X509_NAME* CMP_CTX_sender_get( CMP_CTX *ctx);
 int CMP_CTX_set1_popoMethod( CMP_CTX *ctx, int method);
 int CMP_CTX_set1_proxyName( CMP_CTX *ctx, const char *name);
 int CMP_CTX_set1_proxyPort( CMP_CTX *ctx, int port);
 int CMP_CTX_set1_recipient( CMP_CTX *ctx, const X509_NAME *name);
 int CMP_CTX_set1_sender( CMP_CTX *ctx, const X509_NAME *name);
 int CMP_CTX_set1_serverPath( CMP_CTX *ctx, const char *path);
 int CMP_CTX_set1_serverPort( CMP_CTX *ctx, int port);
 int CMP_CTX_set1_timeOut( CMP_CTX *ctx, int time);
 int CMP_CTX_set_certConf_callback( CMP_CTX *ctx, cmp_certConfFn_t cb);
 int CMP_CTX_subjectAltName_push1( CMP_CTX *ctx, const GENERAL_NAME *name);

=head1 DESCRIPTION

This is the context API for using CMP (Certificate Management Protocol) with OpenSSL.

CMP_CTX_create() allocates and initialized an CMP_CTX structure.

CMP_CTX_init() initializes the context to default values. Compatibility
is set to RFC, transport to HTTP, proof-of-posession method to
POPOSigningKey

CMP_CTX_delete() frees any allocated non-ASN1 fields of CMP_CTX and
calls the ASN1 defined CMP_CTX_free() function to free the rest.

CMP_CTX_set1_referenceValue() sets the given referenceValue in the given
CMP_CTX structure.

CMP_CTX_set1_secretValue() sets the given secretValue in the given
CMP_CTX structure.

CMP_CTX_set1_caCert() sets the given CA Certificate in the given CMP_CTX
structure.

CMP_CTX_set1_clCert() sets the given Client Certificate in the given
CMP_CTX structure. The Client Certificate will then be used by the
functions to set the "sender" field for messages originating from the
client. The private key belonging to this certificate is then used
create the protection in case of MSG_SIG_ALG.

CMP_CTX_set1_subjectName() sets the subject name that will be used in
the CertTemplate structure when requesting a new certificate. Note that
if clCert is set, the name will be read from them and this will be
ignored.

CMP_CTX_set1_newClCert() sets the given (newly obtained) Client
Certificate in the given CMP_CTX structure.

CMP_CTX_set0_pkey() sets the given EVP_PKEY structure, holding the
private and public keys, belonging to the Client Certificate, in the
given CMP_CTX structure.

CMP_CTX_set1_pkey() is the same as above, except that it does not
consume the pointer.

CMP_CTX_set0_newPkey() sets the given EVP_PKEY structure, holding the
private and public keys, which shall be certified, in the given CMP_CTX
structure

CMP_CTX_set1_newPkey() is the same as above, except that it does not
consume the pointer.

CMP_CTX_set1_transactionID() sets the given transaction ID in the given
CMP_CTX structure.

CMP_CTX_set1_recipNonce() sets the given recip nonce in the given
CMP_CTX structure.

CMP_CTX_set1_protectionAlgor() sets the protection algorithm, which
shall be used for the CMP conversation, in the given CMP_CTX structure.

CMP_CTX_set1_serverName() sets the given server Address (as IP or name)
in the given CMP_CTX structure.

CMP_CTX_set1_serverPort() sets the port of the CMP server to connect to.

CMP_CTX_set_protectionAlgor() sets the given definition (CMP_ALG_PBMAG
or CMP_ALG_SIG) of the algorithm to use in the given CMP_CTX structure.

CMP_CTX_set_compatibility() sets the given compatibility in the given
CMP_CTX structure. This is needed since the CMP RFC can be interpreted
in different ways so certain implementations may react different than
others. Available Options are CMP_COMPAT_RFC for strict RFC conformace,
CMP_COMPAT_CRYPTLIB for Cryptlib adaption, CMP_COMPAT_INSTA for Insta
Certifier version < 3.3 adaption (only supported when built with
-DSUPPORT_OLD_INSTA) and CMP_COMPAT_INSTA_3_3 for Insta Certifier
version => 3.3 adaption.

CMP_CTX_set_option() sets the given values to the options
(e.g. CMP_CTX_OPT_IMPLICITCONFIRM) in the given CMP_CTX structure. The
values can be CMP_CTX_OPT_UNSET or CMP_CTX_OPT_SET. Options are always
set to UNSET when the CMP_CTX structure is initialized.

CMP_CTX_caPubs_num() can be used after an Initial Request or Key Update
request to check the number of CA certificates that were sent from the
server.

CMP_CTX_caPubs_pop() pops one CA certificates of the stack of received
CA certs and returns it

CMP_CTX_set1_caPubs() copies the given caPubs stack to the context so
that it may be accessed later by CMP_CTX_caPubs_num() and
CMP_CTX_caPubs_pop().

CMP_CTX_set1_extraCertsOut() sets the stack of extraCerts that will be
sent to remote.

CMP_CTX_extraCertsOut_push1() adds the given certificate to the outbound
extraCerts stack, without consuming the pointer.
 
CMP_CTX_extraCertsOut_num() returns the number of certificates in the
outbound extraCerts stack.

CMP_CTX_set1_extraCertsIn() sets the stack of extraCerts that was
received from remote.

CMP_CTX_extraCertsIn_pop() pops and returns one certificate off the
stack of extra certificates received from remote.

CMP_CTX_extraCertsIn_num() returns the number of certificates that were
received from remote.

CMP_CTX_set0_trustedStore() sets the X509_STORE type certifice store
containing root CA certificates. This is used for example when
attempting to validate CA certificate path.

CMP_CTX_set0_untrustedStore() sets the X509_STORE type certifice store
containing intermediate certificates needed for building our own
certificate chain and including it in extraCerts.

CMP_CTX_set_error_callback() sets a callback function for receiving
error messages.

CMP_CTX_set_debug_callback() sets a callback function for receiving
debug messages.

CMP_CTX_failInfoCode_get() returns the CMP error code from the failInfo
field. This is a bit field and the flags for it are specified in
cmp.h. The flags start with CMP_CTX_FAILINFO, for example:
CMP_CTX_FAILINFO_badAlg.

CMP_CTX_sender_get() Returns the name from the sender field of the last
received PKIMessage.

CMP_CTX_set1_popoMethod() sets the proof-of-posession method to be used
for ir, kur etc. Possible values are CMP_POPO_SIGNATURE and
CMP_POPO_ENCRCERT.

CMP_CTX_set1_proxyName() sets the hostname of the HTTP proxy to be used
for connecting to the CA server.

CMP_CTX_set1_proxyPort() sets the port of the HTTP proxy.

CMP_CTX_set1_recipient() sets the recipient name that will be set in the
PKIHeader, i.e. the X509 name of the CA server.

CMP_CTX_set1_sender() sets the X509 name of the sender.

CMP_CTX_set1_serverPath() HTTP path of the CMP server on the host.

CMP_CTX_set1_serverPort() server port to connect to.

CMP_CTX_set1_timeOut() sets the maximum amount of time an operation is
allowed to take before a timeout error is returned.

CMP_CTX_set_certConf_callback() sets a callback that can be used to
check the certificate received from the server. If the certificate
should be accepted the callback must return 1, and 0 if the certificate
is to be rejected.

CMP_CTX_subjectAltName_push1() adds the given X509 name to the list of
alternate names on the certificate template request.

=head1 NOTES

CMP is defined in RFC 4210 (and CRMF in RFC 4211).

The implementation of CMP for OpenSSL is still work in progress. The API
might change every release!

=head1 RETURN VALUES

CMP_CTX_create() returns a pointer to an initialized CMP_CTX structure.

All other functions return 0 on error, 1 on success.

=head1 EXAMPLE

The following code does an Initial Request with a Cryptlib CA:

	cmp_ctx = CMP_CTX_create();
	CMP_CTX_set1_serverName( cmp_ctx, opt_serverName);
	CMP_CTX_set1_referenceValue( cmp_ctx, idString, idStringLen);
	CMP_CTX_set1_secretValue( cmp_ctx, password, passwordLen);
	CMP_CTX_set0_pkey( cmp_ctx, initialPkey);
	CMP_CTX_set1_caCert( cmp_ctx, caCert);
	CMP_CTX_set_compatibility( cmp_ctx, CMP_COMPAT_CRYPTLIB);

	CMP_new_http_bio( &cbio, opt_serverName, opt_serverPort);

	initialClCert = CMP_doInitialRequestSeq( cbio, cmp_ctx);
	BIO_free(cbio);

The following code does an Initial Request with an Insta CA, using an
external identity certificate (Appendix E.7):

	cmp_ctx = CMP_CTX_create();
	CMP_CTX_set1_serverName( cmp_ctx, opt_serverName);
	CMP_CTX_set1_referenceValue( cmp_ctx, idString, idStringLen);
	CMP_CTX_set0_pkey( cmp_ctx, initialPkey);
	CMP_CTX_set1_caCert( cmp_ctx, caCert);
	CMP_CTX_set_compatibility( cmp_ctx, CMP_COMPAT_CRYPTLIB);

	CMP_new_bio( &cbio, opt_serverName, opt_serverPort);

	initialClCert = CMP_doInitialRequestSeq( cbio, cmp_ctx);
	BIO_free(cbio);

Here externalCert is an X509 certificate granted to the EE by another CA
which is trusted by the current CA the code will connect to.


The following code does a Key Update Request:

	cmp_ctx = CMP_CTX_create();
	CMP_CTX_set1_serverName( cmp_ctx, opt_serverName);
	CMP_CTX_set0_pkey( cmp_ctx, initialPkey);
	CMP_CTX_set0_newPkey( cmp_ctx, updatedPkey);
	CMP_CTX_set1_clCert( cmp_ctx, initialClCert);
	CMP_CTX_set1_caCert( cmp_ctx, caCert);

	CMP_new_bio( &cbio, opt_serverName, opt_serverPort);

	updatedClCert = CMP_doKeyUpdateRequestSeq( cbio, cmp_ctx);
	BIO_free(cbio);

The following code does an Key Update Request with a Cryptlib CA:

	cmp_ctx = CMP_CTX_create();
	CMP_CTX_set1_serverName( cmp_ctx, opt_serverName);
	CMP_CTX_set0_pkey( cmp_ctx, initialPkey);
	CMP_CTX_set0_newPkey( cmp_ctx, updatedPkey);
	CMP_CTX_set1_clCert( cmp_ctx, initialClCert);
	CMP_CTX_set1_caCert( cmp_ctx, caCert);
	CMP_CTX_set_compatibility( cmp_ctx, CMP_COMPAT_CRYPTLIB);

	CMP_new_http_bio( &cbio, opt_serverName, opt_serverPort);

	updatedClCert = CMP_doKeyUpdateRequestSeq( cbio, cmp_ctx);
	BIO_free(cbio);

The following code does an Key Update Request with an Insta Certifier
CA:

	cmp_ctx = CMP_CTX_create();
	CMP_CTX_set1_serverName( cmp_ctx, opt_serverName);
	CMP_CTX_set0_pkey( cmp_ctx, initialPkey);
	CMP_CTX_set0_newPkey( cmp_ctx, updatedPkey);
	CMP_CTX_set1_clCert( cmp_ctx, initialClCert);
	CMP_CTX_set1_caCert( cmp_ctx, caCert);
	CMP_CTX_set_compatibility( cmp_ctx, CMP_COMPAT_INSTA);

	CMP_new_bio( &cbio, opt_serverName, opt_serverPort);

	updatedClCert = CMP_doKeyUpdateRequestSeq( cbio, cmp_ctx);
	BIO_free(cbio);

=head1 TODO

A lot!

=head1 SEE ALSO

CMP_sessions, CMP_http
