=pod

=head1 NAME

 CMP_PKIMESSAGE_http_perform
 CMP_get_http_response_code

=head1 SYNOPSIS

 #include <openssl/cmp.h>

 int CMP_PKIMESSAGE_http_perform(const CMP_CTX *ctx, const CMP_PKIMESSAGE *msg, CMP_PKIMESSAGE **out);
 long CMP_get_http_response_code(const CMP_CTX *ctx);

=head1 DESCRIPTION

This is the API for creating a BIO for CMP (Certificate Management
Protocol) over HTTP with OpenSSL utilizing cURL.

There are two versions of the HTTP code: the default one uses a minimal
HTTP implementation adapted from OCSP (crypto/ocsp/ocsp_ht.c), and the
second one uses libcurl. To enable the libcurl version, one needs to
give 'curl' as an option when running ./config.

CMP_PKIMESSAGE_http_perform() sends the given pkimessage msg to the CMP server
specified in ctx, and returns the servers response in out.

CMP_get_http_response_code() returns last http response code from the ctx.

=head1 NOTES

CMP is defined in RFC 4210 (and CRMF in RFC 4211).

=head1 RETURN VALUES

CMP_get_http_response_code() returns last http response
code of the given bio, 0 on error. Note: This is not available on the
non-curl version.

=head1 EXAMPLE

The following code does an Initial Request:

	cmp_ctx = CMP_CTX_create();
	CMP_CTX_set1_serverName( cmp_ctx, opt_serverName);
	CMP_CTX_set1_referenceValue( cmp_ctx, idString, idStringLen);
	CMP_CTX_set1_secretValue( cmp_ctx, password, passwordLen);
	CMP_CTX_set0_newPkey( cmp_ctx, initialPkey);
	CMP_CTX_set1_srvCert( cmp_ctx, caCert);

	initialClCert = CMP_doInitialRequestSeq(cmp_ctx);


The following code does an Key Update Request:

	cmp_ctx = CMP_CTX_create();
	CMP_CTX_set1_serverName( cmp_ctx, opt_serverName);
	CMP_CTX_set0_pkey( cmp_ctx, initialPkey);
	CMP_CTX_set0_newPkey( cmp_ctx, updatedPkey);
	CMP_CTX_set1_clCert( cmp_ctx, initialClCert);
	CMP_CTX_set1_srvCert( cmp_ctx, caCert);

	updatedClCert = CMP_doKeyUpdateRequestSeq(cmp_ctx);

=head1 TODO

=head1 SEE ALSO

CMP_CTX, CMP_session
